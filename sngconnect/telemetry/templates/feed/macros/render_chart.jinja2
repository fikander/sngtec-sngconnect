{#
    container_id = <ID of DOM element to render the chart in>;
    range_set_button = <jquery query to range setting button>;
    last_set_button = <jquery query to last setting buttons>;
    rendering_data = {
        'type': 'LINEAR',
        'data_url': <url to data API>,
        'data_stream_templates': <ordered by ID, important!>[
            {
                'name': <parameter name>,
                'measurement_unit': <measurement unit>,
                'minimum': <minimal Y-axis value>,
                'maximum': <maximal Y-axis value>,
            }
        ]
    };
    last = <show last n hours>;
#}
{% macro render_chart(container_id, range_set_button, last_set_buttons, rendering_data, last) %}
    <script>
        $(function(){
            function update_x_axis(chart) {
                var parameters = chart.currentDataParameters;
                if (parameters.end !== undefined) {
                    chart.get("x-axis").setExtremes(
                        Date.parse(parameters.start),
                        Date.parse(parameters.end)
                    );
                } else {
                    var now = new Date();
                    chart.get("x-axis").setExtremes(
                        new Date(now.getTime() - (60000 * 60 * parameters.last)),
                        now
                    );
                }
            }
            function reload_chart_data(chart, parameters) {
                chart.showLoading();
                chart.currentDataParameters = parameters;
                update_x_axis(chart);
                $.getJSON(
                    {{ rendering_data.data_url|tojson }},
                    parameters,
                    function(data, textStatus, jqXHR) {
                        data = data.map(function(a){
                            return a.map(function(b){
                                return [
                                    Date.parse(b[0]),
                                    parseFloat(b[1])
                                ];
                            });
                        });
                        {% for data_stream_template in rendering_data.data_stream_templates %}
                            chart.series[{{ loop.index0|tojson}}].setData(
                                data[{{ loop.index0|tojson }}]
                            );
                        {% endfor %}
                        chart.hideLoading();
                    }
                );
            }
            function update_chart_data(chart) {
                if (chart.currentDataParameters.end !== undefined) {
                    return;
                }
                var start = null;
                $.each(chart.series, function(index, series){
                    var point = series.data[series.data.length - 1];
                    if (point === undefined) {
                        return;
                    }
                    if (start === null || start > point.x) {
                        start = point.x;
                    }
                });
                var parameters = {
                    last: chart.currentDataParameters.last
                };
                if (start !== null) {
                    parameters.start = (new Date(start)).toISOString();
                }
                $.getJSON(
                    {{ rendering_data.data_url|tojson }},
                    parameters,
                    function(data, textStatus, jqXHR) {
                        update_x_axis(chart);
                        data = data.map(function(a){
                            return a.map(function(b){
                                return [
                                    Date.parse(b[0]),
                                    parseFloat(b[1])
                                ];
                            });
                        });
                        $.each(chart.series, function(index, series){
                            var last_chart_point = series.data[series.data.length - 1];
                            var new_data = data[index];
                            if (last_chart_point !== undefined) {
                                new_data = $.grep(
                                    data[index],
                                    function(point, index){
                                        return (point[0] > last_chart_point.x);
                                    }
                                );
                            }
                            $.each(new_data, function(index, point){
                                series.addPoint(point, false);
                            });
                        });
                        chart.redraw();
                    }
                );
            }
            var chart = new Highcharts.Chart({
                chart: {
                    renderTo: {{ container_id|tojson }},
                    zoomType: 'x',
                    {% if rendering_data.type == 'DIFFERENTIAL' %}
                        type: 'column',
                    {% else %}
                        type: 'spline',
                    {% endif %}
                    backgroundColor: null,
                    style: {
                        fontFamily: '"Helvetica Neue", Helvetica, Arial, sans-serif',
                        fontSize: '13px'
                    },
                    events: {
                        load: function() {
                            var chart = this;
                            reload_chart_data(
                                chart,
                                {
                                    last: {{ last|tojson }}
                                }
                            );
                            setInterval(function(){
                                update_chart_data(chart);
                            }, 5000);
                        }
                    },
                    ignoreHiddenSeries: true
                },
                title: {
                    text: null
                },
                credits: {
                    enabled: false
                },
                legend: {
                    layout: 'horizontal',
                    align: 'center',
                    verticalAlign: 'top',
                    floating: false,
                    backgroundColor: null,
                    borderWidth: 0,
                    useHTML: false,
                    shadow: false,
                    itemStyle: {
                        fontFamily: '"Helvetica Neue", Helvetica, Arial, sans-serif',
                        fontSize: '13px'
                    }
                },
                colors: ['#EC6446', '#318BDE', '#89A54E', '#4572A7', '#AA4643'],
                plotOptions: {
                    spline: {
                        dashStyle: 'Solid',
                        shadow: false,
                        lineWidth: 3,
                        marker: {
                            enabled: false
                        }
                    }
                },
                xAxis: [{
                    id: 'x-axis',
                    type: 'datetime'
                }],
                yAxis: [
                    {% for data_stream_template in rendering_data.data_stream_templates %}
                        {
                            labels: {
                                formatter: function() {
                                    return this.value + ' ' + {{ data_stream_template.measurement_unit|tojson }};
                                },
                                style: {
                                    color: {{ loop.cycle('#EC6446', '#318BDE', '#89A54E', '#4572A7', '#AA4643')|tojson }}
                                }
                            },
                            title: {
                                text: {{ data_stream_template.name|tojson }},
                                style: {
                                    color: {{ loop.cycle('#EC6446', '#318BDE', '#89A54E', '#4572A7', '#AA4643')|tojson }}
                                }
                            },
                            min: {{ data_stream_template.minimum|tojson }},
                            max: {{ data_stream_template.maximum|tojson }}
                            {%- if loop.cycle(True, False) -%}
                                ,
                                opposite: true
                            {% endif %}
                        }
                        {%- if not loop.last %},{% endif %}
                    {% endfor %}
                ],
                series: [
                    {% for data_stream_template in rendering_data.data_stream_templates %}
                        {
                            name: {{ data_stream_template.name|tojson }},
                            unit: {{ data_stream_template.measurement_unit|tojson }},
                            yAxis: {{ loop.index0|tojson }}
                        }
                        {%- if not loop.last %},{% endif %}
                    {% endfor %}
                ],
                tooltip: {
                    formatter: function() {
                        return '<b>'+ this.series.name +'</b><br/>'+
                        Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) +': '+ this.y + ' ' + this.series.options.unit;
                    }
                }
            });
            {% if last_set_buttons %}
                $({{ last_set_buttons|tojson }}).click(function(event){
                    event.preventDefault();
                    var button = $(event.target);
                    button.parent(".set-last-range-group").find("button").removeClass("active");
                    button.addClass("active");
                    reload_chart_data(chart, {
                        last: button.data("last")
                    });
                });
            {% endif %}
            {% if range_set_button %}
                $({{ range_set_button|tojson }}).click(function(event){
                    event.preventDefault();
                    var button = $(event.target);
                    var start_input = button.parent("form").find("input[name='start']");
                    var end_input = button.parent("form").find("input[name='end']");
                    var start = new Date(Date.parse(start_input.val()));
                    var end = new Date(Date.parse(end_input.val()));
                    if (end <= start) {
                        alert({% filter tojson %}{% trans %}End date must be greater than start date.{% endtrans %}{% endfilter %});
                    } else {
                        $({{ last_set_buttons|tojson }}).parent(".set-last-range-group").find("button").removeClass("active");
                        reload_chart_data(chart, {
                            start: start.toISOString(),
                            end: end.toISOString()
                        });
                    }
                });
            {% endif %}
        });
    </script>
{% endmacro %}
